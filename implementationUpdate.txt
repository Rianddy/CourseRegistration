//------------------------------------------------
//Planning
//------------------------------------------------
- Go over the proof of concept for the message queue
	- Need ideas in general
	- Currently uses SMTPS, will need to switch over to IMAP
	- Find more ways to add message queues to the system
		- There are notes in implementation below for suggestions
		- Still need more though :|
	- Go over the decision of having a lot of message queues or very few
		- So far, the consensus is to have few or one
	- Will need one dedicated to *services* for temporal decoupling
		- So far, permissions is a candidate
(Will have planning people in dev more next week to help with permission and messages)

- Go over ways to make the system more durable
	- Need ideas in general
	- Atomic services with roll back
		- For example, enrollment with several classes could be all or nothing
		- Maybe use message queues to deal with services (see above)?
	- Idempotent service pattern
		- Similar in that we need to monitor the state of transactions somehow
		- Refer to book as a starting point
		- Feel free to do a proof of concept

//------------------------------------------------
//Registration module (2nd iteration)
//------------------------------------------------
**THERE IS OVERLAP WITH DROP, CHECKOUT FILES ACCORDINGLY**
Logic type
	updateClassInformation
		- Input			: class ID
		- Output		: boolean (set to true for success)
		- Logic			: Changes cur_Size and/or cur_waitlist
						: See Notes
		- Notes			
			One way to do it would be to get a count from StudentEnroll table by class id.
			Then, update the class record with the count.
			!! Will need to add this to either insertStudentEnrollment or to calls in addition
				to insertStudentEnrollment (dev's choice)
	classCanRegister (change)
		- Input			: class ID
		- Output 		: integer denoting spaces left (previously was string)
							eg: 3 means 3 class spaces left
							eg: -2 means 2 waitlist spaces left
		- Logic			: Checks if a class is available for registration
		- Notes
			!! Will need changes to the functions that called it previously
			The changes are to accommodate linked services later for browsing purposes
Datasource type
	updateClass
		- Input			: Key value pair type
							eg. m.put("Cls_ID", "1")
								m.put("Cur_Size", "9")
		- Output		: boolean (set to true for success)
		- Logic			: reads in the input to create sql query for update
		- Notes
			Key value pairs are one way to do this.
			Could absolutely be persuaded to use an object input for stricter constraints
	insertStudentEnrollment (appension)
		- Input			: studentID, classID, String status
		- Output		: student Enrollment ID
		- Logic			: inserts a student enrollment record based on status
						: status is 'enroll' or 'waitlist'
		- Notes
			You can overload this if needed, or make changes to the functions that called it previously
			
//------------------------------------------------
//Drop module (2nd iteration)
//------------------------------------------------
**THERE IS OVERLAP WITH DROP, CHECKOUT FILES ACCORDINGLY**
Logic type
	servlet with service controller for POST in 'drop'
		- Input			: parses form data in POST under 'drop' path
		- Output		: for now, out.println statements (similar to register)
		- Logic			: calls dropStudentEnrollment
						: calls updateClassInformation (not datasource adapter)
						: calls moveWaitlistStudent
						: calls updateClassInformation if move was successful(not datasource adapter)
						: prints out information (at least studentEnrollment ID, boolean for success)
	dropStudentEnrollment
		- Input			: student id, class id
		- Output		: studentEnrollmentID
		- Logic			: calls updateStudentEnrollment
		- Notes
			This is here instead of a direct call to updateStudentEnrollment to anticipate more logic for later iterations
				tl;dr place holder for later
	moveWaitlistStudent
		- Input			: class id
		- Output		: studentEnrollmentID, 0 for no change, -1 for failure
		- Logic			: call getWaitlist
						: call updateStudentEnrollment on the first person on the list
		- Notes
			Future work: In an attempt to utilize more message queues, we may alert the students on the waitlist when they've moved up.
						 Message for student who was moved
			
Datasource type
	updateStudentEnrollment
		- Input			: studentID, classID, String status
		- Output		: student Enrollment ID
		- Logic			: updates a student enrollment record with the status
						: for now, status is 'enroll' or 'waitlist'
	getWaitlist
		- Input 		: classID
		- Output		: array of student ids
		- Logic 		: get a list of students with 'waitlist' status for a classID
						  order by timestamp
		